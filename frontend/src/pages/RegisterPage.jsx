import React, { useState, useContext } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import { toast } from 'react-toastify';
import { FiUser, FiLock, FiUserPlus } from 'react-icons/fi';
import AuthContext from '../context/AuthContext';
import AuthBackground from '../components/AuthBackground';
import AuthCard from '../components/AuthCard';
import AnimatedInput from '../components/AnimatedInput';
import AnimatedButton from '../components/AnimatedButton';
import ThemeToggle from '../components/ThemeToggle';

const RegisterPage = () => {
    const [formData, setFormData] = useState({
        username: '',
        password: '',
        password2: '', // For password confirmation
    });
    const [loading, setLoading] = useState(false);

    const { username, password, password2 } = formData;
    const { register } = useContext(AuthContext);
    const navigate = useNavigate();

    const onChange = (e) => setFormData({ ...formData, [e.target.name]: e.target.value });

    // H√†m ki·ªÉm tra m·∫≠t kh·∫©u m·∫°nh
    const validatePassword = (password) => {
        const minLength = password.length >= 6;
        const hasLowerCase = /[a-z]/.test(password);
        const hasUpperCase = /[A-Z]/.test(password);
        const hasNumbers = /\d/.test(password);

        return {
            isValid: minLength && hasLowerCase && hasUpperCase && hasNumbers,
            errors: [
                !minLength && 'M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±',
                !hasLowerCase && 'M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 1 ch·ªØ th∆∞·ªùng (a-z)',
                !hasUpperCase && 'M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 1 ch·ªØ hoa (A-Z)',
                !hasNumbers && 'M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 1 s·ªë (0-9)'
            ].filter(Boolean)
        };
    };

    const onSubmit = async (e) => {
        e.preventDefault();
        console.log('üìù RegisterPage - Form submit:', { username, passwordLength: password?.length, password2Length: password2?.length });

        // Ki·ªÉm tra m·∫≠t kh·∫©u kh·ªõp
        if (password !== password2) {
            console.log('‚ùå RegisterPage - M·∫≠t kh·∫©u kh√¥ng kh·ªõp');
            toast.error('M·∫≠t kh·∫©u kh√¥ng kh·ªõp');
            return;
        }

        // Ki·ªÉm tra ƒë·ªô m·∫°nh m·∫≠t kh·∫©u
        const passwordValidation = validatePassword(password);
        if (!passwordValidation.isValid) {
            console.log('‚ùå RegisterPage - M·∫≠t kh·∫©u kh√¥ng ƒë·ªß m·∫°nh:', passwordValidation.errors);
            // Hi·ªÉn th·ªã l·ªói t·ªïng h·ª£p trong 1 toast
            const errorMessage = `M·∫≠t kh·∫©u ch∆∞a ƒë·ªß m·∫°nh:\n${passwordValidation.errors.join('\n')}`;
            toast.error(errorMessage, {
                style: {
                    whiteSpace: 'pre-line' // Cho ph√©p xu·ªëng d√≤ng
                }
            });
            return;
        }

        console.log('üöÄ RegisterPage - ƒêang g·ªçi register function...');
        setLoading(true);
        await register(username, password);
        // AuthContext handles navigation and notifications.
        setLoading(false);
        console.log('‚úÖ RegisterPage - Ho√†n th√†nh register process');
    };

    return (
        <AuthBackground>
            {/* Theme Toggle - Fixed Position */}
            <div className="fixed top-6 right-6 z-20">
                <ThemeToggle />
            </div>

            <AuthCard
                title="ƒêƒÉng k√Ω"
                subtitle="T·∫°o t√†i kho·∫£n m·ªõi ƒë·ªÉ b·∫Øt ƒë·∫ßu qu·∫£n l√Ω m·∫≠t kh·∫©u c·ªßa b·∫°n m·ªôt c√°ch an to√†n."
            >
                <form onSubmit={onSubmit} className="space-y-6">
                    <AnimatedInput
                        label="T√™n ƒëƒÉng nh·∫≠p"
                        type="text"
                        name="username"
                        value={username}
                        onChange={onChange}
                        icon={FiUser}
                        required
                    />

                    <AnimatedInput
                        label="M·∫≠t kh·∫©u"
                        type="password"
                        name="password"
                        value={password}
                        onChange={onChange}
                        icon={FiLock}
                        minLength="6"
                        required
                    />

                    <AnimatedInput
                        label="X√°c nh·∫≠n m·∫≠t kh·∫©u"
                        type="password"
                        name="password2"
                        value={password2}
                        onChange={onChange}
                        icon={FiLock}
                        minLength="6"
                        required
                    />

                    <AnimatedButton
                        type="submit"
                        loading={loading}
                        icon={FiUserPlus}
                        disabled={loading}
                    >
                        ƒêƒÉng k√Ω
                    </AnimatedButton>
                </form>

                <div className="mt-8 text-center">
                    <p className="text-gray-600 text-sm">
                        ƒê√£ c√≥ t√†i kho·∫£n?{' '}
                        <Link
                            to="/login"
                            className="font-semibold text-primary-custom hover:text-primary-hover transition-colors duration-200 hover:underline"
                        >
                            ƒêƒÉng nh·∫≠p ngay
                        </Link>
                    </p>
                </div>
            </AuthCard>
        </AuthBackground>
    );
};

export default RegisterPage;
