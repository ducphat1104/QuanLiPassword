const User = require('../models/User');
const auth = require('../middleware/authMiddleware');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');

// @desc    ƒêƒÉng k√Ω ng∆∞·ªùi d√πng m·ªõi
// @route   POST /api/auth/register
// @access  Public - C√¥ng khai
exports.register = async (req, res) => {
    const { username, password } = req.body;

    try {
        console.log('üîê ƒêang x·ª≠ l√Ω ƒëƒÉng k√Ω cho username:', username);
        console.log('üìù D·ªØ li·ªáu nh·∫≠n ƒë∆∞·ª£c:', { username, passwordLength: password?.length });

        // Ki·ªÉm tra d·ªØ li·ªáu ƒë·∫ßu v√†o
        if (!username || !password) {
            console.log('‚ùå Thi·∫øu username ho·∫∑c password');
            return res.status(400).json({
                msg: 'Vui l√≤ng cung c·∫•p ƒë·∫ßy ƒë·ªß t√™n ƒëƒÉng nh·∫≠p v√† m·∫≠t kh·∫©u',
                missing: {
                    username: !username,
                    password: !password
                }
            });
        }

        // Ki·ªÉm tra xem ng∆∞·ªùi d√πng ƒë√£ t·ªìn t·∫°i ch∆∞a
        let user = await User.findOne({ username });
        if (user) {
            console.log('‚ùå Username ƒë√£ t·ªìn t·∫°i:', username);
            return res.status(400).json({ msg: 'T√™n ng∆∞·ªùi d√πng ƒë√£ t·ªìn t·∫°i' });
        }

        // T·∫°o instance ng∆∞·ªùi d√πng m·ªõi
        user = new User({
            username,
            password,
        });

        // Hash m·∫≠t kh·∫©u tr∆∞·ªõc khi l∆∞u
        console.log('üîí ƒêang hash m·∫≠t kh·∫©u...');
        const salt = await bcrypt.genSalt(10);
        user.password = await bcrypt.hash(password, salt);

        await user.save();
        console.log('‚úÖ ƒê√£ t·∫°o ng∆∞·ªùi d√πng m·ªõi:', username);

        // T·∫°o v√† tr·∫£ v·ªÅ JWT token
        const payload = {
            user: {
                id: user.id,
            },
        };

        jwt.sign(
            payload,
            process.env.JWT_SECRET,
            { expiresIn: '5h' }, // Token h·∫øt h·∫°n sau 5 gi·ªù
            (err, token) => {
                if (err) throw err;
                console.log('üé´ ƒê√£ t·∫°o JWT token cho:', username);
                res.json({ token });
            }
        );
    } catch (err) {
        console.error('‚ùå L·ªói ƒëƒÉng k√Ω:', err.message);
        res.status(500).send('L·ªói m√°y ch·ªß');
    }
};

// @desc    L·∫•y th√¥ng tin ng∆∞·ªùi d√πng hi·ªán t·∫°i
// @route   GET /api/auth/me
// @access  Private - Ri√™ng t∆∞ (c·∫ßn JWT token)
exports.getMe = async (req, res) => {
    try {
        console.log('üë§ ƒêang l·∫•y th√¥ng tin ng∆∞·ªùi d√πng ID:', req.user.id);

        // req.user ƒë∆∞·ª£c g·∫Øn t·ª´ auth middleware
        const user = await User.findById(req.user.id).select('-password');
        if (!user) {
            console.log('‚ùå Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng ID:', req.user.id);
            return res.status(404).json({ msg: 'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng' });
        }

        console.log('‚úÖ ƒê√£ l·∫•y th√¥ng tin ng∆∞·ªùi d√πng:', user.username);
        res.json(user);
    } catch (err) {
        console.error('‚ùå L·ªói l·∫•y th√¥ng tin ng∆∞·ªùi d√πng:', err.message);
        res.status(500).send('L·ªói m√°y ch·ªß');
    }
};

// @desc    X√°c th·ª±c ng∆∞·ªùi d√πng v√† l·∫•y token (ƒêƒÉng nh·∫≠p)
// @route   POST /api/auth/login
// @access  Public - C√¥ng khai
exports.login = async (req, res) => {
    const { username, password } = req.body;

    try {
        console.log('üîê ƒêang x·ª≠ l√Ω ƒëƒÉng nh·∫≠p cho username:', username);

        // Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ t·ªìn t·∫°i kh√¥ng
        let user = await User.findOne({ username });
        if (!user) {
            console.log('‚ùå Kh√¥ng t√¨m th·∫•y username:', username);
            return res.status(400).json({ msg: 'T√™n ƒëƒÉng nh·∫≠p ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng' });
        }

        // So s√°nh m·∫≠t kh·∫©u nh·∫≠p v√†o v·ªõi m·∫≠t kh·∫©u ƒë√£ hash
        console.log('üîç ƒêang ki·ªÉm tra m·∫≠t kh·∫©u...');
        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            console.log('‚ùå M·∫≠t kh·∫©u kh√¥ng ƒë√∫ng cho username:', username);
            return res.status(400).json({ msg: 'T√™n ƒëƒÉng nh·∫≠p ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng' });
        }

        // T·∫°o v√† tr·∫£ v·ªÅ JWT token
        console.log('‚úÖ ƒêƒÉng nh·∫≠p th√†nh c√¥ng cho:', username);
        const payload = {
            user: {
                id: user.id,
            },
        };

        jwt.sign(
            payload,
            process.env.JWT_SECRET,
            { expiresIn: '5h' }, // Token h·∫øt h·∫°n sau 5 gi·ªù
            (err, token) => {
                if (err) throw err;
                console.log('üé´ ƒê√£ t·∫°o JWT token cho:', username);
                res.json({ token });
            }
        );
    } catch (err) {
        console.error('‚ùå L·ªói ƒëƒÉng nh·∫≠p:', err.message);
        res.status(500).send('L·ªói m√°y ch·ªß');
    }
};

// @desc    C·∫≠p nh·∫≠t th√¥ng tin profile ng∆∞·ªùi d√πng (username)
// @route   PUT /api/auth/profile
// @access  Private - Ri√™ng t∆∞ (c·∫ßn JWT token)
exports.updateProfile = async (req, res) => {
    const { username } = req.body;

    try {
        console.log('üë§ ƒêang c·∫≠p nh·∫≠t profile cho user ID:', req.user.id, 'username m·ªõi:', username);

        // Ki·ªÉm tra username c√≥ ƒë∆∞·ª£c cung c·∫•p kh√¥ng
        if (!username || username.trim() === '') {
            console.log('‚ùå Username kh√¥ng ƒë∆∞·ª£c cung c·∫•p');
            return res.status(400).json({ msg: 'T√™n ng∆∞·ªùi d√πng l√† b·∫Øt bu·ªôc' });
        }

        // Ki·ªÉm tra username ƒë√£ t·ªìn t·∫°i ch∆∞a (lo·∫°i tr·ª´ user hi·ªán t·∫°i)
        const existingUser = await User.findOne({
            username: username.trim(),
            _id: { $ne: req.user.id }
        });

        if (existingUser) {
            console.log('‚ùå Username ƒë√£ t·ªìn t·∫°i:', username);
            return res.status(400).json({ msg: 'T√™n ng∆∞·ªùi d√πng ƒë√£ t·ªìn t·∫°i' });
        }

        // C·∫≠p nh·∫≠t th√¥ng tin user
        console.log('üîÑ ƒêang c·∫≠p nh·∫≠t username...');
        const user = await User.findByIdAndUpdate(
            req.user.id,
            { username: username.trim() },
            { new: true, runValidators: true } // Tr·∫£ v·ªÅ document m·ªõi v√† ch·∫°y validation
        ).select('-password'); // Kh√¥ng tr·∫£ v·ªÅ password

        if (!user) {
            return res.status(404).json({ msg: 'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng' });
        }

        // Tr·∫£ v·ªÅ th√¥ng tin user ƒë√£ c·∫≠p nh·∫≠t
        res.json({
            success: true,
            msg: 'C·∫≠p nh·∫≠t th√¥ng tin th√†nh c√¥ng',
            user
        });
    } catch (err) {
        console.error(err.message);
        res.status(500).send('Server error');
    }
};

// @desc    Change user password
// @route   PUT /api/auth/change-password
// @access  Private
exports.changePassword = async (req, res) => {
    const { currentPassword, newPassword } = req.body;

    try {
        // Validation ƒë·∫ßu v√†o
        if (!currentPassword || !newPassword) {
            return res.status(400).json({
                msg: 'M·∫≠t kh·∫©u hi·ªán t·∫°i v√† m·∫≠t kh·∫©u m·ªõi l√† b·∫Øt bu·ªôc'
            });
        }

        if (newPassword.length < 6) {
            return res.status(400).json({
                msg: 'M·∫≠t kh·∫©u m·ªõi ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±'
            });
        }

        // L·∫•y th√¥ng tin user k√®m password ƒë·ªÉ verify
        const user = await User.findById(req.user.id);
        if (!user) {
            return res.status(404).json({ msg: 'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng' });
        }

        // X√°c minh m·∫≠t kh·∫©u hi·ªán t·∫°i
        const isMatch = await bcrypt.compare(currentPassword, user.password);
        if (!isMatch) {
            return res.status(400).json({ msg: 'M·∫≠t kh·∫©u hi·ªán t·∫°i kh√¥ng ƒë√∫ng' });
        }

        // M√£ h√≥a m·∫≠t kh·∫©u m·ªõi
        const salt = await bcrypt.genSalt(10);
        const hashedNewPassword = await bcrypt.hash(newPassword, salt);

        // C·∫≠p nh·∫≠t m·∫≠t kh·∫©u trong database
        await User.findByIdAndUpdate(req.user.id, {
            password: hashedNewPassword
        });

        // Tr·∫£ v·ªÅ k·∫øt qu·∫£ th√†nh c√¥ng
        res.json({
            success: true,
            msg: 'ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng'
        });
    } catch (err) {
        console.error(err.message);
        res.status(500).send('Server error');
    }
};
